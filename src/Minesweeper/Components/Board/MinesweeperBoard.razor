@namespace Pk9r.Minesweeper.Components
@inherits FluentComponentBase
@inject GameState GameState

<div style="display: flex; flex-direction: column; width: min-content;"
     oncontextmenu="return false;" ondrag="return false;" ondragstart="return false;">
    <div style="display: inline-flex;">
        <div class="topleft" />
        @for (int i = 0; i < Width; i++)
        {
            <div class="top" />
        }
        <div class="topright" />
    </div>

    <div style="background: #c0c0c0; display: inline-flex; justify-content: space-between; align-items: center;">
        <div>
            <div class="left" />
            <div class="left" />
        </div>
        <MinesweeperNumberBox Values="010" />

        <MinesweeperFace />

        <MinesweeperNumberBox Values="000" />
        <div>
            <div class="right" />
            <div class="right" />
        </div>
    </div>

    <div style="display: inline-flex; align-items: end;">
        <div class="middleleft" />
        @for (int i = 0; i < Width; i++)
        {
            <div class="middletop" />
        }
        <div class="middleright" />
    </div>

    @for (int y = 0; y < Height; y++)
    {
        <div style="display: inline-flex;">

            <div class="left" />

            @for (int x = 0; x < Width; x++)
            {
                @CellDisplay(GameState.GetCellState(x, y))
            }

            <div class="right" />

        </div>
    }

    <div style="display: inline-flex;">
        <div class="bottomleft" />
        @for (int i = 0; i < Width; i++)
        {
            <div class="bottom" />
        }
        <div class="bottomright" />
    </div>
</div>

@code {
    private RenderFragment<CellState> CellDisplay = cellState =>
    {
        var cssBuilder = new CssBuilder()
            .AddClass("cell");

        if (cellState.IsMine)
            cssBuilder.AddClass(Cell.CellMine.ToAttributeValue());
        else if (!cellState.IsRevealed)
            cssBuilder.AddClass(Cell.CellUp.ToAttributeValue());
        else if (cellState.AdjacentMines == 0)
            cssBuilder.AddClass(Cell.CellDown.ToAttributeValue());
        else
            cssBuilder.AddClass(((Cell)cellState.AdjacentMines).ToAttributeValue());

        var classValue = cssBuilder.Build();

        return@<div class="@classValue" />  ;
    };
}