@namespace Pk9r.Blazor.Minesweeper.Components
@inherits FluentComponentBase
@inject MinesweeperState GameState

<div class="board" style="display: flex; flex-direction: column; width: min-content; --zoom: 100"
     oncontextmenu="return false;" ondrag="return false;" ondragstart="return false;">
    <div style="display: inline-flex;">
        <div class="topleft" />
        @for (int i = 0; i < Width; i++)
        {
            <div class="top" />
        }
        <div class="topright" />
    </div>

    <div style="background: #c0c0c0; display: inline-flex; justify-content: space-between; align-items: center;">
        <div>
            <div class="left" />
            <div class="left" />
        </div>
        <MinesweeperNumberBox Values="@GameState.MinesNotFlagged.ToString("d3")" />

        <MinesweeperFace />

        <MinesweeperNumberBox Values="000" />
        <div>
            <div class="right" />
            <div class="right" />
        </div>
    </div>

    <div style="display: inline-flex; align-items: end;">
        <div class="middleleft" />
        @for (int i = 0; i < Width; i++)
        {
            <div class="middletop" />
        }
        <div class="middleright" />
    </div>

    @for (int y = 0; y < Height; y++)
    {
        <div style="display: inline-flex;">

            <div class="left" />

            @for (int x = 0; x < Width; x++)
            {
                var cellState = GameState.GetCellState(x, y);

                var cssBuilder = new CssBuilder().AddClass("cell");

                var cell =
                cellState.IsFlagged ? Cell.CellFlag :
                !cellState.IsRevealed ? (GameState.IsFocusCell && cellState == GameState.HoveredCell) ? Cell.CellDown : Cell.CellUp :
                cellState.IsMine ? Cell.CellMine :
                cellState.AdjacentMines == 0 ? Cell.CellDown :
                (Cell)cellState.AdjacentMines;

                cssBuilder.AddClass(cell.ToAttributeValue());

                var classValue = cssBuilder.Build();

                <div class="@classValue"
                     @onmouseup="@cellState.OnMouseUp"
                     @onmousedown="@cellState.OnMouseDown"
                     @onmouseout="@cellState.OnMouseOut"
                     @onmouseover="@cellState.OnMouseOver" />
            }

            <div class="right" />

        </div>
    }

    <div style="display: inline-flex;">
        <div class="bottomleft" />
        @for (int i = 0; i < Width; i++)
        {
            <div class="bottom" />
        }
        <div class="bottomright" />
    </div>
</div>

@code {
    // private RenderFragment<string> _elementBuilder = (string element) =>
    // {
    //     stylee
    //     return @<div class="@element" />
    // }
}